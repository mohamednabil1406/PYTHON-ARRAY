Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
deleted file mode 100644
--- a/.idea/misc.xml	(revision d5154a038faa6e7784763f884c26f7f36eb4d8e3)
+++ /dev/null	(revision d5154a038faa6e7784763f884c26f7f36eb4d8e3)
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="Black">
-    <option name="sdkName" value="Python 3.13 (PythonArrayPrograms)" />
-  </component>
-</project>
\ No newline at end of file
Index: RemoveDuplicatesinArray.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/RemoveDuplicatesinArray.py b/RemoveDuplicatesinArray.py
deleted file mode 100644
--- a/RemoveDuplicatesinArray.py	(revision d5154a038faa6e7784763f884c26f7f36eb4d8e3)
+++ /dev/null	(revision d5154a038faa6e7784763f884c26f7f36eb4d8e3)
@@ -1,16 +0,0 @@
-def remove_duplicates(arr):
-    result = []
-    for i in range(len(arr)):
-        duplicate = False
-        # Check if arr[i] is already in result
-        for j in range(len(result)):
-            if arr[i] == result[j]:
-                duplicate = True
-                break
-        if not duplicate:
-            result.append(arr[i])
-    return result
-
-# Sample input
-arr = [1, 2, 2, 3, 4, 4, 5]
-print("Array after removing duplicates:", remove_duplicates(arr))
Index: SecondLargestNumber.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SecondLargestNumber.py b/SecondLargestNumber.py
deleted file mode 100644
--- a/SecondLargestNumber.py	(revision d5154a038faa6e7784763f884c26f7f36eb4d8e3)
+++ /dev/null	(revision d5154a038faa6e7784763f884c26f7f36eb4d8e3)
@@ -1,14 +0,0 @@
-#find second largest element
-
-
-def SecondLargest(arr):
-    large=second=-1
-    for i in range(len(arr)):
-        if arr[i]>large:
-            second=large
-            large=arr[i]
-        elif arr[i]>second and arr[i]!=large:
-            second=arr[i]
-    return second
-arr=[12,35,1,10,34,1]
-print("second largest",SecondLargest(arr))
\ No newline at end of file
Index: FrequencyArray.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FrequencyArray.py b/FrequencyArray.py
deleted file mode 100644
--- a/FrequencyArray.py	(revision d5154a038faa6e7784763f884c26f7f36eb4d8e3)
+++ /dev/null	(revision d5154a038faa6e7784763f884c26f7f36eb4d8e3)
@@ -1,28 +0,0 @@
-def frequency_descending(arr):
-    freq = []
-
-    # Step 1: Count frequencies manually
-    for i in range(len(arr)):
-        found = False
-        for j in range(len(freq)):
-            if freq[j][0] == arr[i]:
-                freq[j][1] += 1
-                found = True
-                break
-        if not found:
-            freq.append([arr[i], 1])
-
-    # Step 2: Sort by frequency (descending)
-    for i in range(len(freq)):
-        for j in range(i + 1, len(freq)):
-            if freq[i][1] < freq[j][1]:
-                freq[i], freq[j] = freq[j], freq[i]
-
-    # Step 3: Print the result
-    for pair in freq:
-        print(pair[0], ":", pair[1])
-
-
-# Sample input
-arr = [50, 20, 150, 20, 50, 10, 30, 10, 10]
-frequency_descending(arr)
Index: re-arrange an array in small–large combination.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/re-arrange an array in small–large combination.py b/re-arrange an array in small–large combination.py
deleted file mode 100644
--- a/re-arrange an array in small–large combination.py	(revision d5154a038faa6e7784763f884c26f7f36eb4d8e3)
+++ /dev/null	(revision d5154a038faa6e7784763f884c26f7f36eb4d8e3)
@@ -1,26 +0,0 @@
-def rearrange_small_large(arr):
-
-    for i in range(len(arr)):
-        for j in range(i + 1, len(arr)):
-            if arr[i] > arr[j]:
-                arr[i], arr[j] = arr[j], arr[i]
-
-    result = []
-    left = 0
-    right = len(arr) - 1
-
-
-    while left <= right:
-        if left == right:
-            result.append(arr[left])
-        else:
-            result.append(arr[left])
-            result.append(arr[right])
-        left += 1
-        right -= 1
-
-    return result
-
-
-arr = [1, 3, 5, 2, 8, 7, 4]
-print("Re-arranged array:", rearrange_small_large(arr))
